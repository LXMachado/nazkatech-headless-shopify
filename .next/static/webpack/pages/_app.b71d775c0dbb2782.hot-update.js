"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "(pages-dir-browser)/./src/lib/shopify.ts":
/*!****************************!*\
  !*** ./src/lib/shopify.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCheckout: () => (/* binding */ createCheckout),\n/* harmony export */   getAllProducts: () => (/* binding */ getAllProducts),\n/* harmony export */   getProductByHandle: () => (/* binding */ getProductByHandle)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(pages-dir-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n// Trim any spaces from the domain to prevent URL parsing errors\nconst domain = (\"test-lxm-store.myshopify.com \" || 0).trim();\nconst storefrontAccessToken = \"0ce4d842935ad80150c5f601331ba9f9-1743945461\" || 0;\nconst storePassword = process.env.SHOPIFY_STORE_PASSWORD || '';\nconst apiKey = process.env.SHOPIFY_API_KEY || '';\nconst apiSecret = process.env.SHOPIFY_API_SECRET || '';\n// For debugging\nconsole.log('Environment check:');\nconsole.log('Domain configured:', domain || 'Not set');\nconsole.log('Access token available:', storefrontAccessToken ? 'Yes' : 'No');\nconsole.log('API key available:', apiKey ? 'Yes' : 'No');\nconsole.log('API secret available:', apiSecret ? 'Yes' : 'No');\nconsole.log('Store password available:', storePassword ? 'Yes' : 'No');\n// Try multiple auth strategies\nconst shopifyFetch = async (param)=>{\n    let { query, variables } = param;\n    try {\n        // Set up the API URL - try using the Storefront API specifically\n        const apiUrl = \"https://\".concat(domain, \"/api/2024-01/graphql.json\");\n        // For admin API access we would use:\n        // const apiUrl = `https://${domain}/admin/api/2024-01/graphql.json`;\n        // Prepare headers with authentication - we'll try multiple approaches\n        const headers = {\n            'Content-Type': 'application/json',\n            'X-Shopify-Storefront-Access-Token': storefrontAccessToken\n        };\n        // Try a combination of authentication approaches\n        // Option 1: Use the Storefront API token for public apps\n        // This is already set in the headers above\n        // Option 2: For private apps or admin API\n        if (apiKey && apiSecret) {\n            console.log('Using private app authentication');\n            // For private app authentication, we use the API key as the username\n            // and the password as the API secret/private app password\n            const base64PrivateAppCredentials = Buffer.from(\"\".concat(apiKey, \":\").concat(apiSecret)).toString('base64');\n            headers['Authorization'] = \"Basic \".concat(base64PrivateAppCredentials);\n            // Remove the storefront token if we're using private app auth\n            delete headers['X-Shopify-Storefront-Access-Token'];\n        } else if (storePassword) {\n            console.log('Using password-protected store access');\n            // Base64 encode the credentials (HTTP Basic Authentication)\n            // For storefront password protection, no username is needed\n            const base64StoreCredentials = Buffer.from(\"\".concat(storePassword, \":\")).toString('base64');\n            headers['Authorization'] = \"Basic \".concat(base64StoreCredentials);\n        }\n        // Log the request information for debugging (safely)\n        console.log('Shopify API Request URL:', apiUrl);\n        console.log('Using access token:', storefrontAccessToken ? 'Token exists' : 'No token provided');\n        console.log('Using API key:', apiKey ? 'Yes' : 'No');\n        console.log('Password protected:', storePassword ? 'Yes' : 'No');\n        const result = await fetch(apiUrl, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify({\n                query,\n                variables\n            })\n        });\n        const responseBody = await result.json();\n        // Log the response for debugging\n        console.log('Shopify API Response Status:', result.status);\n        if (result.status !== 200) {\n            console.log('Shopify API Response Errors:', responseBody.errors);\n        }\n        return {\n            status: result.status,\n            body: responseBody\n        };\n    } catch (error) {\n        console.error('Error fetching data from Shopify:', error);\n        return {\n            status: 500,\n            body: {\n                errors: [\n                    {\n                        message: 'Error fetching data from Shopify'\n                    }\n                ]\n            }\n        };\n    }\n};\nasync function getAllProducts() {\n    const query = \"\\n    query GetAllProducts {\\n      products(first: 100) {\\n        edges {\\n          node {\\n            id\\n            title\\n            description\\n            handle\\n            priceRange {\\n              minVariantPrice {\\n                amount\\n                currencyCode\\n              }\\n            }\\n            images(first: 1) {\\n              edges {\\n                node {\\n                  url\\n                  altText\\n                }\\n              }\\n            }\\n            variants(first: 100) {\\n              edges {\\n                node {\\n                  id\\n                  title\\n                  price {\\n                    amount\\n                    currencyCode\\n                  }\\n                  availableForSale\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \";\n    const response = await shopifyFetch({\n        query\n    });\n    if (response.status !== 200 || !response.body.data) {\n        console.error('Error fetching products:', response.body.errors);\n        return [];\n    }\n    const products = response.body.data.products.edges.map((param)=>{\n        let { node } = param;\n        var _node_images_edges_, _node_images_edges_1;\n        const product = {\n            id: node.id,\n            title: node.title,\n            description: node.description,\n            handle: node.handle,\n            price: node.priceRange.minVariantPrice.amount,\n            currencyCode: node.priceRange.minVariantPrice.currencyCode,\n            image: ((_node_images_edges_ = node.images.edges[0]) === null || _node_images_edges_ === void 0 ? void 0 : _node_images_edges_.node.url) || '',\n            imageAlt: ((_node_images_edges_1 = node.images.edges[0]) === null || _node_images_edges_1 === void 0 ? void 0 : _node_images_edges_1.node.altText) || node.title,\n            variants: node.variants.edges.map((param)=>{\n                let { node: variant } = param;\n                return {\n                    id: variant.id,\n                    title: variant.title,\n                    price: variant.price.amount,\n                    currencyCode: variant.price.currencyCode,\n                    availableForSale: variant.availableForSale\n                };\n            })\n        };\n        return product;\n    });\n    return products;\n}\nasync function getProductByHandle(handle) {\n    var _product_images_edges_, _product_images_edges_1;\n    const query = \"\\n    query GetProductByHandle($handle: String!) {\\n      productByHandle(handle: $handle) {\\n        id\\n        title\\n        description\\n        handle\\n        descriptionHtml\\n        priceRange {\\n          minVariantPrice {\\n            amount\\n            currencyCode\\n          }\\n        }\\n        images(first: 10) {\\n          edges {\\n            node {\\n              url\\n              altText\\n              width\\n              height\\n            }\\n          }\\n        }\\n        variants(first: 100) {\\n          edges {\\n            node {\\n              id\\n              title\\n              price {\\n                amount\\n                currencyCode\\n              }\\n              availableForSale\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \";\n    const variables = {\n        handle\n    };\n    const response = await shopifyFetch({\n        query,\n        variables\n    });\n    if (response.status !== 200 || !response.body.data.productByHandle) {\n        console.error('Error fetching product:', response.body.errors);\n        return null;\n    }\n    const product = response.body.data.productByHandle;\n    return {\n        id: product.id,\n        title: product.title,\n        description: product.description,\n        handle: product.handle,\n        descriptionHtml: product.descriptionHtml,\n        price: product.priceRange.minVariantPrice.amount,\n        currencyCode: product.priceRange.minVariantPrice.currencyCode,\n        images: product.images.edges.map((param)=>{\n            let { node } = param;\n            return {\n                url: node.url,\n                altText: node.altText || product.title,\n                width: node.width,\n                height: node.height\n            };\n        }),\n        image: ((_product_images_edges_ = product.images.edges[0]) === null || _product_images_edges_ === void 0 ? void 0 : _product_images_edges_.node.url) || '',\n        imageAlt: ((_product_images_edges_1 = product.images.edges[0]) === null || _product_images_edges_1 === void 0 ? void 0 : _product_images_edges_1.node.altText) || product.title,\n        variants: product.variants.edges.map((param)=>{\n            let { node: variant } = param;\n            return {\n                id: variant.id,\n                title: variant.title,\n                price: variant.price.amount,\n                currencyCode: variant.price.currencyCode,\n                availableForSale: variant.availableForSale\n            };\n        })\n    };\n}\nasync function createCheckout(cartItems) {\n    var _response_body_data_checkoutCreate_checkoutUserErrors, _response_body_data_checkoutCreate, _response_body_data;\n    const lineItems = cartItems.map((item)=>({\n            variantId: item.variantId,\n            quantity: item.quantity\n        }));\n    const query = \"\\n    mutation CheckoutCreate($input: CheckoutCreateInput!) {\\n      checkoutCreate(input: $input) {\\n        checkout {\\n          id\\n          webUrl\\n        }\\n        checkoutUserErrors {\\n          code\\n          field\\n          message\\n        }\\n      }\\n    }\\n  \";\n    const variables = {\n        input: {\n            lineItems\n        }\n    };\n    const response = await shopifyFetch({\n        query,\n        variables\n    });\n    if (response.status !== 200 || ((_response_body_data = response.body.data) === null || _response_body_data === void 0 ? void 0 : (_response_body_data_checkoutCreate = _response_body_data.checkoutCreate) === null || _response_body_data_checkoutCreate === void 0 ? void 0 : (_response_body_data_checkoutCreate_checkoutUserErrors = _response_body_data_checkoutCreate.checkoutUserErrors) === null || _response_body_data_checkoutCreate_checkoutUserErrors === void 0 ? void 0 : _response_body_data_checkoutCreate_checkoutUserErrors.length) > 0) {\n        var _response_body_data_checkoutCreate1, _response_body_data1;\n        console.error('Error creating checkout:', response.body.errors || ((_response_body_data1 = response.body.data) === null || _response_body_data1 === void 0 ? void 0 : (_response_body_data_checkoutCreate1 = _response_body_data1.checkoutCreate) === null || _response_body_data_checkoutCreate1 === void 0 ? void 0 : _response_body_data_checkoutCreate1.checkoutUserErrors));\n        return null;\n    }\n    return response.body.data.checkoutCreate.checkout.webUrl;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/lib/shopify.ts\n"));

/***/ })

});